/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package View.GraphicalView.BoardView.LeftContainer;

import Controller.ThrowCurrentPlayerDiceController;
import Events.CarPositionChangedEvent;
import Events.CarStatesChangedEvent;
import Events.ChangedClassementEvent;
import Events.CreateViewEvent;
import Events.CurrentPlayerCarSpeedChanged;
import Events.CurrentPlayerChangedEvent;
import Events.SelectedPlayerChangedEvent;
import Events.ThrowCurrentPlayerDiceEvent;
import Events.CurrentPlayerDiceValueChangedEvent;
import Events.DivinModeChangedEvent;
import Events.GameOverEvent;
import Events.PlayerFinishedALapEvent;
import Events.PlayerIsEliminateEvent;
import Events.PlayerLoosePointsEvent;
import Events.PlayerWonEvent;
import Events.PlayersSortedEvent;
import Events.RuleInformationEvent;
import Events.ScrapOnCellEvent;
import Events.SelectedBendChangedEvent;
import Model.Dice;
import Model.Players.ComputerPlayer;
import View.AbstractFormulaDView;
import View.AbstractGameView;
import com.google.common.eventbus.Subscribe;
import java.awt.Color;

/**
 *
 * @author matt
 */
public class DiceViewPanel extends javax.swing.JPanel implements AbstractFormulaDView, AbstractGameView {

    public static Color divinModeDiceColor = new Color(54, 87, 56);

    /**
     * Creates new form DiceView
     */
    public DiceViewPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        diceValue = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        diceColor = new javax.swing.JLabel();
        diceMinRange = new javax.swing.JLabel();
        diceMaxRange = new javax.swing.JLabel();
        throwDiceButton = new View.GraphicalView.FormulaDButtons.FormulaDWarningButton("Throw dice");

        setBackground(new java.awt.Color(114, 167, 178));
        setForeground(new java.awt.Color(255, 255, 255));
        setMaximumSize(new java.awt.Dimension(336, 110));
        setMinimumSize(new java.awt.Dimension(336, 110));
        setOpaque(false);
        setPreferredSize(new java.awt.Dimension(336, 110));

        diceValue.setBackground(new java.awt.Color(0, 0, 0));
        diceValue.setFont(new java.awt.Font("Ubuntu", 1, 14)); // NOI18N
        diceValue.setForeground(new java.awt.Color(255, 255, 255));
        diceValue.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        diceValue.setOpaque(true);

        jLabel2.setFont(new java.awt.Font("Ubuntu", 0, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Dice Color :");

        jLabel3.setFont(new java.awt.Font("Ubuntu", 0, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Min Range :");

        jLabel4.setFont(new java.awt.Font("Ubuntu", 0, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Max Range :");

        diceColor.setFont(new java.awt.Font("Ubuntu", 0, 12)); // NOI18N
        diceColor.setForeground(new java.awt.Color(255, 255, 255));

        diceMinRange.setFont(new java.awt.Font("Ubuntu", 0, 12)); // NOI18N
        diceMinRange.setForeground(new java.awt.Color(255, 255, 255));

        diceMaxRange.setFont(new java.awt.Font("Ubuntu", 0, 12)); // NOI18N
        diceMaxRange.setForeground(new java.awt.Color(255, 255, 255));

        throwDiceButton.setEnabled(false);
        throwDiceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                throwDiceButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(throwDiceButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(diceValue, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel4)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 162, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(diceMinRange, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(diceColor, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(diceMaxRange, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(diceColor))
                        .addGap(3, 3, 3)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(diceMinRange))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(diceMaxRange)))
                    .addComponent(diceValue, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(throwDiceButton, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(10, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void throwDiceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_throwDiceButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_throwDiceButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel diceColor;
    private javax.swing.JLabel diceMaxRange;
    private javax.swing.JLabel diceMinRange;
    private javax.swing.JLabel diceValue;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private View.GraphicalView.FormulaDButtons.FormulaDWarningButton throwDiceButton;
    // End of variables declaration//GEN-END:variables

    @Override
    public void createView(CreateViewEvent ev) {
        initControllers(ev);
        refreshCurrentPlayer(new CurrentPlayerChangedEvent(ev.getSender().getPlayersManager().getCurrentPlayer()));
    }

    @Override
    @Subscribe
    public void refreshDice(ThrowCurrentPlayerDiceEvent ev) {
        this.throwDiceButton.setEnabled(false);
        this.diceValue.setText("" + ev.getCurrentDiceValue());
    }

    @Override
    @Subscribe
    public void refreshCurrentPlayer(CurrentPlayerChangedEvent ev) {
        Dice currentDice = ev.getCurrentPlayer().getCar().getSpeed().getDice();
        refreshDiceInformations(currentDice, ev.getCurrentPlayer().getGame().getDivinMode());
    }

    @Override
    public void refreshClassement(ChangedClassementEvent ev) {
    }

    @Override
    public void refreshCarPosition(CarPositionChangedEvent ev) {
    }

    @Override
    public void refreshCurrentPlayerCarSpeed(CurrentPlayerCarSpeedChanged ev) {
        Dice currentDice = ev.getCurrentPlayer().getCar().getSpeed().getDice();
        refreshDiceInformations(currentDice, ev.getCurrentPlayer().getGame().getDivinMode());
        if (ev.getCurrentPlayer() instanceof ComputerPlayer) {
            this.throwDiceButton.setEnabled(false);
        } else {
            this.throwDiceButton.setEnabled(true);
        }
    }

    @Override
    public void refreshSelectedPlayer(SelectedPlayerChangedEvent ev) {
    }

    @Override
    @Subscribe
    public void refreshCurrentPlayerDiceValue(CurrentPlayerDiceValueChangedEvent ev) {
        this.diceValue.setText("" + ev.getDiceValue());
    }

    @Override
    @Subscribe
    public void refreshCarStates(CarStatesChangedEvent ev) {
    }

    /*
     * Initialisation des contrôleurs
     */
    private void initControllers(CreateViewEvent ev) {
        this.throwDiceButton.addActionListener(new ThrowCurrentPlayerDiceController(ev.getSender()));
    }

    private void refreshDiceInformations(Dice dice, boolean divinMode) {
        this.diceColor.setText(dice.getDiceColorName());
        this.diceMinRange.setText("" + dice.getRangeMin());
        this.diceMaxRange.setText("" + dice.getRangeMax());
        this.diceValue.setText("0");
        this.diceValue.setBackground(dice.getColor());
    }

    @Override
    public void refreshSelectedBend(SelectedBendChangedEvent ev) {
    }

    @Override
    public void refreshSortedPlayer(PlayersSortedEvent ev) {
    }

    @Override
    public void refreshPlayerIsEliminate(PlayerIsEliminateEvent ev) {
    }

    @Override
    public void refreshRuleInformation(RuleInformationEvent ev) {
    }

    @Override
    public void refreshPlayerLoosePoint(PlayerLoosePointsEvent ev) {
    }

    @Override
    public void refreshPlayerFinishedLap(PlayerFinishedALapEvent ev) {
    }

    @Override
    public void refreshPlayerWon(PlayerWonEvent ev) {
    }

    @Override
    public void refreshDivinMode(DivinModeChangedEvent ev) {
        boolean divinMode = ev.getGame().getDivinMode();
        this.throwDiceButton.setEnabled(!divinMode);
    }

    @Override
    public void refreshGameOver(GameOverEvent ev) {
    }

    @Override
    public void refreshCell(ScrapOnCellEvent ev) {
    }
}
